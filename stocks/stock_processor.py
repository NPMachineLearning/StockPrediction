# -*- coding: utf-8 -*-
"""Yahoo_Stock_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CbA4lXxgG5gIPTFgLEDqNuPylD6Co_HY
"""

from utils.utils import setup_logging
from ingestor.stocks_ingestor import ingest_stocks
import matplotlib.pyplot as plt
import pandas as pd
import os
from utils.mysql_utils import read_dataframe_from_table
from sklearn.ensemble import RandomForestRegressor

def setup():
  if not os.path.exists("./logs"):
    os.mkdir("./logs")

  setup_logging("./logs/stock_processor.log")

def train_model(stock_symbols, window=7):
  try:
    for stock in stock_symbols:
      stock_df = read_dataframe_from_table(stock)

      # get stock Close values
      data = stock_df[["Close"]]

      # rename to Price
      data = data.rename(columns={"Close": "Price"})

      # mean of a period(window) for training 
      data["Period"] = data["Price"].rolling(window).mean()
      data = data.dropna()
      
      # Shift Price back 1 row since we are predicting
      # 1 future day by a period(window)
      data = data.assign(Price=data["Price"].shift(-1))
      data = data.dropna()

      # prepare X, y training and target data
      X = data[["Period"]].to_numpy()
      y = data["Price"]

      # train model
      model = RandomForestRegressor()
      model.fit(X, y)

      # model score
      print(model.score(X, y))
  except Exception as err:
    print(err)

if __name__ == "__main__":
  setup()
  stocks = ["BTC-USD", "GC=F"]
  print(ingest_stocks(stock_symbols=stocks))
  train_model(stocks)



# data = stock_data[["Close"]]
# data = data.rename(columns={"Close": "Price"})
# data

# data["P5"] = data["Price"].rolling(5).mean()
# data["P7"] = data["Price"].rolling(7).mean()
# data.head(15)

# data = data.dropna()
# data