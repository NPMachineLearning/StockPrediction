# -*- coding: utf-8 -*-
"""Yahoo_Stock_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CbA4lXxgG5gIPTFgLEDqNuPylD6Co_HY
"""

from utils.utils import setup_logging
import pandas as pd
import numpy as np
import os
from utils.stock_utils import train_model, prepare_data_for_training, download_stock
from utils.mysql_utils import create_table_from_dataframe
from utils.mongo_utils import get_database
import logging
import time
import datetime

def setup():
  if not os.path.exists("./logs"):
    os.mkdir("./logs")

  setup_logging("./logs/stock_processor.log")

def make_stock_forcast(model, x, window=7):
  if isinstance(x, np.ndarray):
    # flatten
    x = x.reshape(-1)
    x = pd.Series(x)
  elif not isinstance(x, pd.Series):
    raise RuntimeError(f"x must either be a pandas Series or numpy array")
  
  data_rolled = x.rolling(window).mean()
  data_rolled = data_rolled.dropna()
  data_rolled = data_rolled.to_numpy()
  forecasts = model.predict(np.expand_dims(data_rolled, axis=1))
  return forecasts

if __name__ == "__main__":
  setup()
  # stocks = ["BTC-USD", "GC=F"]
  mongo_db = get_database()
  stocks = mongo_db["stocks"].find_one()["stock_symbols"]
  # window size of data
  # for training model
  # window = 7
  window = mongo_db["config"].find_one()["window"]

  try:
    for stock_symbol in stocks:

      logging.info(f"----------- Processing {stock_symbol} stock -----------")

      logging.info(f"Downloading data .....")
      stock_df = download_stock(stock_symbol)
      logging.info(f"Downloading data completed")

      ## skip for writing original stock data into database
      # logging.info(f"Writting data into database .....")
      # create_table_from_dataframe(stock_data_df, stock_symbol)
      # logging.info(f"Writting data into database completed")
      
      ## Prepare data for training model
      logging.info(f"Prepare stock data for model training")
      ## skip for reading dataframe from database
      # stock_df = read_dataframe_from_table(stock_symbol)
      X, y = prepare_data_for_training(stock_df=stock_df,
                                      window=window,
                                      target_colum_name="Close")
      logging.info(f"Prepare stock data for model training completed")

      ## Training the model ##
      logging.info(f"Training model ......")
      t1 = time.time()
      model = train_model(X=X, y=y)
      t2 = time.time()
      logging.info(f"Training model completed")
      logging.info(f"Training time -> {t2-t1} seconds")

      ## Make forecasting ##
      logging.info(f"Forcasting .....")
      forecasts = make_stock_forcast(model=model, 
                                    x=stock_df["Close"], 
                                    window=window)
      logging.info(f"Forcasting completed")

      # Create DataFrame for forecast
      logging.info(f"Creating DataFrame from forecast .....")
      
      # make a new row to be append to stock dataframe
      # because we forecast next day
      new_row = pd.DataFrame([[np.nan]*len(stock_df.columns)], 
                            columns=stock_df.columns,)
      
      # create the date object of next day forecast 
      new_date = stock_df["Date"].values[-1]+datetime.timedelta(days=1)

      # add new row to stock dataframe
      stock_df = pd.concat([stock_df, new_row]).reset_index(drop=True)
      
      # set forecast
      dates = stock_df["Date"].copy()
      dates.iloc[-1] = new_date
      stock_df["Date"] = dates
      
      # create forecast dataframe
      forecast_df = pd.DataFrame(data={"Prediction": forecasts,
                                      "Date": stock_df["Date"][window:]})
      logging.info(f"Creating DataFrame from forecast completed")

      ## Merge stock DataFrame with forecast DataFrame ##
      logging.info(f"Merging stock and forcast data .....")
      stock_df = stock_df.merge(forecast_df, on="Date", how="outer")

      # reset index
      stock_df = stock_df.reset_index(drop=True)
      logging.info(f"Merging stock and forcast data completed")

      ## Writing final stock data back to database ##
      logging.info(f"Writing stock and forecast data into database .....")
      create_table_from_dataframe(stock_df, stock_symbol)
      logging.info(f"Writing stock and forecast data into database completed")

      logging.info(f"----------- Processing {stock_symbol} stock completed -----------")
  except Exception as err:
    logging.error(err)
    print(err)
