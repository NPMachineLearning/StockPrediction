version: "3.8"

services:
  # MYSQL database service
  mysql_db:
    image: mysql
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_DB_PASSWORD}
      MYSQL_DATABASE: stocks
    # stocks service rely on this health check
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    ports:
      - 3306:3306
    volumes:
      # see volumes below
      - mysql-db-volume:/var/lib/mysql

  # MYSQL admin GUI service for MYSQL database
  adminer:
    image: adminer
    container_name: mysql_db_ui
    restart: always
    ports:
      - 9000:8080
    depends_on:
      mysql_db:
        condition: service_healthy

  # Mongo database service
  mongo:
    build:
      context: ./
      dockerfile: ./mongodb/Dockerfile
    image: mongo_db
    container_name: mongo_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD}
    command:
      [
        "--replSet",
        "rs0",
        "--bind_ip_all",
        "--port",
        "27017",
        "--keyFile",
        "/mongodbkey",
      ]
    healthcheck:
      test: ["CMD-SHELL", "/init_rs.sh"]
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    ports:
      - 27017:27017
    volumes:
      # see volumes below
      - mongo-db-volume:/data/db
      - mongo-db-volume:/data/configdb

  # Mongo admin GUI service for Mongo database
  mongo_express:
    image: mongo-express
    container_name: mongo_db_ui
    restart: always
    ports:
      - 8001:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_DB_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_DB_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      mongo:
        condition: service_healthy

  # Stock manager service
  stock_manager:
    build:
      context: ./
      dockerfile: ./stock_manager/Dockerfile
    image: stock_manager
    container_name: stock_manager
    restart: always
    depends_on:
      mysql_db:
        condition: service_healthy
      mongo:
        condition: service_healthy

  # Stock backend api service
  stock_api:
    build:
      context: ./
      dockerfile: ./stock_api/Dockerfile
    image: stock_api
    container_name: stock_api
    restart: always
    ports:
      - 8002:8002
    depends_on:
      mysql_db:
        condition: service_healthy
      mongo:
        condition: service_healthy

# Docker's volumes(storages) for services
volumes:
  # create a volume for mysql database
  mysql-db-volume:
    name: mysql_db_storage
  mongo-db-volume:
    name: mongo_db_storage
